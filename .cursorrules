# News Plugin Architecture

## Goals

* Model a real newspaper: sections, nested sections, and configurable fronts.
* Keep the system simple (KISS), fast, and secure.

## Core Concepts

* **Section**: Hierarchical container (e.g., World, Sports). Sections can nest.
* **Article**: News post assigned to one or more Sections.
* **Front**: A curated, configurable landing page for a Section. The overall Home Front is a special case of a Section Front.
* **Placement**: Optional advertisement or promo slots rendered within a Front layout.

## High-Level Architecture (Gutenberg-first)

* **CPT/Taxonomy**

  * `news` custom post type for Articles.
  * `news_section` hierarchical taxonomy for Sections.
* **Fronts**

  * `Front` abstraction defines data sources (queries), layout regions, and rendering hooks.
  * `HomeFront` is a special `Front` operating at the root.
  * `SectionFront` renders a Section (and optionally its child Sections).
  * Fronts can declare placements and content modules.
* **Admin (Editor surfaces)**

  * Gutenberg-only: settings and curation via blocks/panels; no Classic UI.
  * Minimal UI to manage Sections, configure Fronts, and define placements.
* **Templates / Rendering**

  * Hook/Filter-first rendering: all HTML output is filterable/actionable so themes/plugins can override easily.
  * Minimal default templates only when necessary; they must emit via actions/filters and be overrideable with `locate_template()`.
  * Server-rendered PHP with proper escaping and simple view helpers.
  * Efficient `WP_Query` usage; transients/object cache for expensive data.
* **Assets**

  * Enqueued CSS/JS only where needed.
  * Provide filters to disable/replace plugin CSS/JS; keep styles minimal and structural.
  * Frontend interactivity may use `jQuery`; avoid custom React outside Gutenberg APIs.

## Blocks

* Register blocks with `block.json` and `registerBlockType`.
* Keep attributes minimal and map them to REST/meta.
* Use `InspectorControls` for editor-side settings panels.
* Prefer server-side rendering (`render_callback`) for data-heavy fronts; expose filters around render.
* Minimal example: single block with editable text, URL, and colors via Inspector.

## Data Model (Online-only newspaper, WP/REST/Blocks-ready)

* **Article**

  * Post type: `news` (canonical content unit)
  * Core: title, dek/summary, body, featured image, slug, status, publish/modified dates
  * Editorial: bylines (multiple authors), contributors, desk, beat/topic tags, location
  * Flags: featured, top, sticky, breaking, exclusive, sponsored (boolean/meta)
  * SEO: meta title/description, canonical URL, OpenGraph/Twitter fields
  * Relationships: primary Section (term), additional Sections (terms), related Articles (post IDs), primary MediaAsset
  * Compliance: corrections/updates log (timestamped notes)
  * Scheduling: embargo (datetime), expire/hide after (optional)
  * REST: expose meta via `register_post_meta(..., ['show_in_rest' => true])`
* **Section**

  * Taxonomy: `news_section` (hierarchical; e.g., Home > Sports > Local Teams)
  * Meta: display name, slug, order/weight, visibility, front config reference
  * Editorial: section description/standfirst, default image/color (optional)
  * REST: term meta via `register_term_meta('news_section', ..., ['show_in_rest' => true])`
* **Front**

  * Types: HomeFront | SectionFront (Home is a special Section front)
  * Config: regions (hero, rails, sidebars), queries (by section/flags), manual curation slots
  * Behavior: include/exclude child Sections, pagination/"more" links, freshness windows
  * Placements: named ad/promo slots mapped to regions
  * Storage: options API (`news_fronts`) for simple sites; CPT `news_front` if revisions/workflow needed
  * REST: expose computed front JSON (regions -> items, placements)
* **Placement**

  * Slot: identifier, region, priority, conditions (device, section, path)
  * Render: callback/filter/shortcode reference; data payload (key/value)
  * REST: readonly registry via filter output
* **Author**

  * User-linked profile: display name, bio, headshot, social links
  * Byline roles: writer, editor, photographer (per-article attribution)
  * REST: user meta exposed selectively
* **Beats/Tags**

  * Flat taxonomy for topics/keywords; used for discovery and Front modules
  * Optional geotags for locality (city, neighborhood)
* **MediaAsset**

  * Attachment wrapper: images, video, audio, galleries
  * Meta: caption, credit, alt text, focal point, rendition map
* **BreakingAlert**

  * Lightweight entity for urgent notices surfaced in Front hero/alerts bar
  * Fields: headline, link (article or external), severity, start/end, audiences
  * Storage: transient or option with TTL; REST exposure for widgets/tickers

## Front Configuration (Examples)

* Hero region: latest featured article from Section (and/or children).
* Rails/columns: latest N articles; optionally include child Sections.
* The Home Front may aggregate multiple top Sections.

## Extensibility

* Hooks/Filters for: data queries, layout regions, placements, template parts.
* New Front types can be registered by implementing the Front interface.

## Theme/Plugin Override Strategy (Best Practices)

* Every render step exposes actions/filters (e.g., `news_front_regions`, `news_render_slot`, `news_enqueue_assets`).
* Themes can override templates via `locate_template('news/...')` and selectively short-circuit plugin rendering using filters.
* Minimal templates, when present, only orchestrate hooks and escape output; no business logic.
* Asset loading is opt-in per view and overrideable with filters; themes may dequeue and supply their own.

## Performance & Caching

* Use transients for Front data blocks; bust on article/section changes.
* Minimize queries; prefetch thumbnails/meta; lazy-load assets.

## Theme integration (IMPORTANT)

* The site uses a custom block theme at `/usr/share/webapps/dev/wordpress/themes/news-theme`.
* All theme-related templates, parts, patterns, styles (`theme.json`/CSS), and branding belong in that theme.
* Do not place theme code in this plugin. Only structural/minimal templates/assets necessary for functionality may live here and must be hook/override-friendly.

## Security

* Cap checks in admin; nonces for actions; sanitize and escape all data.
* Register post/term/user meta with `sanitize_callback`, `type`, `default`; expose via REST only when needed.
* For REST: define param schemas with `args` (`sanitize_callback`, `validate_callback`); return `WP_Error` on invalid input.
* Escape on output (`esc_html`, `esc_attr`, `esc_url`, `wp_kses_post`); keep templates minimal and use hooks.

## Testing

* PHPUnit: unit tests for Front logic and helpers; integration tests for hooks.

## File Layout (planned)

* `news.php` — bootstrap, hooks.
* `src/` — namespaced code.

  * `PostTypes/` — CPT and taxonomy registration.
  * `Fronts/` — Front abstractions and concrete fronts.
  * `Admin/` — settings screens, metaboxes.
  * `Templates/` — PHP templates for fronts and parts.
  * `Assets/` — CSS/JS (enqueued via wp_enqueue_*).

## Future Considerations

* Breaking News surface in fronts.
* Block-based front regions (optional).
* Pluggable placement providers (ads, promos, house ads).

## WordPress Mapping (concise, maintainable)

* **Content Types**

  * CPT: `news` (supports title, editor, excerpt, thumbnail, author, revisions, custom-fields)
  * Taxonomies: `news_section` (hierarchical), `news_beat` (flat)
  * Meta: register with `register_post_meta()` and `show_in_rest => true` for AI-friendly JSON
* **Fronts**

  * Represent front configs as options (`get_option('news_fronts')`) or a CPT `news_front` if editorial curation needs revisions.
  * Render via actions/filters; resolve theme overrides with `locate_template('news/fronts/...')`.
  * Expose REST endpoint (readonly) summarizing front regions for external consumers.
* **Placements**

  * Register placement areas via a filter (`news_register_placements`) returning an array of slots.
  * Render with `do_action('news_render_slot', $slot_id, $context)`; themes hook to supply markup.
* **Authors**

  * Use WordPress users; extended fields via user meta (`register_meta('user', ...)` with REST exposure).
* **Security & Caps**

  * Custom caps: `edit_news`, `publish_news`, `manage_news_fronts`; map with `register_post_type()` capabilities.
  * Nonces for admin actions; capability checks on AJAX/REST mutations.
* **Performance**

  * Transients/object cache for front regions (per region key); invalidate on post/term changes.
  * Efficient `WP_Query` with selected fields, preloaded thumbnails/meta.
* **Assets**

  * Conditional enqueue; filters to disable/replace assets; minimal structural CSS.
* **Internationalization**

  * Text domain `news`; `.pot` shipped; strings wrapped in `__()`/`_x()`.
* **AI/Automation**

  * REST: expose Articles, Sections, Fronts with stable schemas; include computed fields (primary_section, hero_article).
  * JSON-LD for Articles and breadcrumb Sections via `wp_head` hooks.
  * Predictable hooks for content extraction: `news_collect_article_data` filter returns normalized object.
